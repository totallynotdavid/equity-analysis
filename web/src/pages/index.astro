---
import Layout from "@/layouts/Layout.astro";

import { Button } from "@/components/starwind/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/starwind/card";
import { Dropzone, DropzoneFilesList, DropzoneUploadIndicator } from "@/components/starwind/dropzone";
import { Skeleton } from "@/components/starwind/skeleton";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/starwind/tabs";
---

<Layout>
	<main class="container mx-auto max-w-4xl px-4 py-12 sm:py-24">
		<div class="flex flex-col items-center justify-center text-center">
			<h1
				class="bg-gradient-to-br from-primary to-foreground/80 bg-clip-text text-4xl font-bold tracking-tight text-transparent"
			>
				Equity Analysis Processor
			</h1>
			<p class="mt-3 max-w-md text-base text-muted-foreground">
				Upload your Excel file to instantly view the processed equity
				analysis, beautifully organized and ready for review.
			</p>

			<div id="app-state-container" class="mt-10 w-full">
				<div id="uploader-section" class="app-section">
					<Card class="shadow-sm">
						<CardHeader>
							<CardTitle class="text-xl">Upload File</CardTitle>
							<CardDescription>
								Select or drop your .xlsx file below.
							</CardDescription>
						</CardHeader>
						<CardContent>
							<form id="upload-form">
								<Dropzone name="file-upload" accept=".xlsx,.xls" required>
									<DropzoneUploadIndicator>
										<div
											class="my-6 flex flex-col items-center justify-center gap-3 text-base"
										>
											<svg
												xmlns="http://www.w3.org/2000/svg"
												width="32"
												height="32"
												viewBox="0 0 24 24"
												fill="none"
												stroke="currentColor"
												stroke-width="1.5"
												stroke-linecap="round"
												stroke-linejoin="round"
												class="text-muted-foreground"
											>
												<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline
													points="17 8 12 3 7 8"
												></polyline><line x1="12" x2="12" y1="3" y2="15"></line>
											</svg>
											<span>Drop Excel file here or click to upload</span>
										</div>
									</DropzoneUploadIndicator>
									<DropzoneFilesList />
								</Dropzone>
								<Button
									type="submit"
									class="mt-4 w-full transition-transform hover:scale-[1.02]"
									>Process File</Button
								>
							</form>
						</CardContent>
					</Card>
				</div>

				<div id="loading-section" class="app-section hidden">
					<Card class="shadow-sm">
						<CardHeader>
							<Skeleton class="h-6 w-48" />
							<Skeleton class="mt-2 h-4 w-full max-w-sm" />
						</CardHeader>
						<CardContent class="space-y-4">
							<div class="flex space-x-4">
								<Skeleton class="h-10 w-24 rounded-md" />
								<Skeleton class="h-10 w-24 rounded-md" />
								<Skeleton class="h-10 w-24 rounded-md" />
							</div>
							<div class="space-y-3 pt-4">
								<Skeleton class="h-8 w-full animate-pulse" />
								<Skeleton
									class="h-8 w-full animate-pulse"
									style="animation-delay: 0.2s;"
								/>
								<Skeleton
									class="h-8 w-full animate-pulse"
									style="animation-delay: 0.4s;"
								/>
							</div>
						</CardContent>
					</Card>
				</div>

				<div id="results-section" class="app-section hidden">
					<Tabs defaultValue="daily">
						<TabsList class="grid w-full grid-cols-3">
							<TabsTrigger value="daily">Daily</TabsTrigger>
							<TabsTrigger value="monthly">Monthly</TabsTrigger>
							<TabsTrigger value="monthly_macro">Monthly + Macro</TabsTrigger>
						</TabsList>

						<TabsContent value="daily">
							<div id="daily-table"></div>
						</TabsContent>
						<TabsContent value="monthly">
							<div id="monthly-table"></div>
						</TabsContent>
						<TabsContent value="monthly_macro">
							<div id="monthly-macro-table"></div>
						</TabsContent>
					</Tabs>
				</div>
			</div>
		</div>
	</main>
</Layout>

<style>
	.app-section {
		transition:
			opacity 0.5s ease-in-out,
			transform 0.5s ease-in-out;
	}
	.app-section.hidden {
		opacity: 0;
		transform: scale(0.98);
		display: none;
	}
</style>

<script>
	/** @typedef {import('./index.astro').EquityRecord} EquityRecord */

	const uploaderSection = document.getElementById("uploader-section");
	const loadingSection = document.getElementById("loading-section");
	const resultsSection = document.getElementById("results-section");
	const uploadForm = document.getElementById("upload-form");

	/** Switches the visible section with a fade effect */
	function switchSection(targetSection) {
		const sections = [uploaderSection, loadingSection, resultsSection];
		sections.forEach(section => {
			if (section === targetSection) {
				section.classList.remove('hidden');
				// Use a timeout to allow the display property to apply before starting the transition
				setTimeout(() => section.style.opacity = '1', 10);
			} else {
				section.style.opacity = '0';
				// Hide the element after the transition completes
				setTimeout(() => section.classList.add('hidden'), 500);
			}
		});
	}

	function mockApiCall() {
		console.log("Simulating API call...");
		return new Promise((resolve) => {
			setTimeout(() => {
				const mockData = {
					data_diaria: [{ sheet_name: "AAPL MF Equity", final_value: 8.0, grade: 'A', predicted_return: 0.5, performance_grade: 'A' }, { sheet_name: "GOOGL MF Equity", final_value: 7.2, grade: 'A', predicted_return: 0.4, performance_grade: 'B' }],
					data_mensual: [{ sheet_name: "TSLA MF Equity", final_value: 6.5, grade: 'B', predicted_return: 1.2, performance_grade: 'A' }],
					data_mensual_macro: [{ sheet_name: "AMZN MF Equity", final_value: 9.1, grade: 'A', predicted_return: 1.8, performance_grade: 'A' }],
				};
				resolve(mockData);
			}, 2000);
		});
	}

	function populateTable(containerId, data) {
		const tableContainer = document.getElementById(containerId);
		if (!tableContainer) return;

		let rowsHtml = '';
		if (!data || data.length === 0) {
			rowsHtml = '<tr><td colspan="5" class="p-6 text-center text-muted-foreground">No data available for this category.</td></tr>';
		} else {
			rowsHtml = data.map(record => `
				<tr class="border-b transition-colors hover:bg-muted/50 even:bg-muted/30">
					<td class="p-4 align-middle font-medium text-foreground">${record.sheet_name}</td>
					<td class="p-4 align-middle text-right">${record.final_value.toFixed(2)}</td>
					<td class="p-4 align-middle text-center">${record.grade}</td>
					<td class="p-4 align-middle text-center">${record.performance_grade}</td>
					<td class="p-4 align-middle text-right">${record.predicted_return.toFixed(2)}%</td>
				</tr>
			`).join('');
		}

		const tableWrapperHtml = `
			<div class="mt-4 overflow-hidden rounded-[var(--radius)] border">
				<table class="w-full text-sm">
					<thead class="[&_tr]:border-b">
						<tr class="border-b bg-muted/60 transition-colors">
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Ticker</th>
							<th class="h-12 px-4 text-right align-middle font-medium text-muted-foreground">Final Value</th>
							<th class="h-12 px-4 text-center align-middle font-medium text-muted-foreground">Grade</th>
							<th class="h-12 px-4 text-center align-middle font-medium text-muted-foreground">Model Perf.</th>
							<th class="h-12 px-4 text-right align-middle font-medium text-muted-foreground">Predicted Return</th>
						</tr>
					</thead>
					<tbody class="[&_tr:last-child]:border-0">
						${rowsHtml}
					</tbody>
				</table>
			</div>
		`;
		
		tableContainer.innerHTML = tableWrapperHtml;
	}

	/** Handles form submission */
	async function handleFormSubmit(event) {
		event.preventDefault();
		const fileInput = uploadForm.querySelector('input[type="file"]');

		if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
			return;
		}

		switchSection(loadingSection);

		try {
			const data = await mockApiCall();
			
			populateTable("daily-table", data.data_diaria);
			populateTable("monthly-table", data.data_mensual);
			populateTable("monthly-macro-table", data.data_mensual_macro);
			
			// Small delay before showing results to feel intentional
			setTimeout(() => switchSection(resultsSection), 200);

		} catch (error) {
			console.error("Failed to process file:", error);
			switchSection(uploaderSection); // Switch back on error
		}
	}

	// Initialize the first section's opacity to 1
	uploaderSection.style.opacity = '1';
	uploadForm.addEventListener("submit", handleFormSubmit);
</script>
