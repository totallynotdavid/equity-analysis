---
import Layout from "@/layouts/Layout.astro";

// Starwind Components
import { Button } from "@/components/starwind/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/starwind/card";
import { Dropzone, DropzoneFilesList, DropzoneUploadIndicator } from "@/components/starwind/dropzone";
import { Skeleton } from "@/components/starwind/skeleton";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/starwind/tabs";

// Type definition for the equity data based on your JSON schema
type EquityRecord = {
	sheet_name: string;
	final_value: number;
	grade: string;
	predicted_return: number;
	performance_grade: string;
};
---

<Layout>
	<main class="container mx-auto max-w-4xl px-4 py-12 sm:py-24">
		<div class="flex flex-col items-center justify-center text-center">
			<!-- Header -->
			<h1 class="text-2xl font-semibold tracking-tight">
				Equity Analysis Processor
			</h1>
			<p class="mt-2 text-base text-muted-foreground">
				Upload your Excel file to view the processed equity analysis.
			</p>

			<!-- Uploader Card -->
			<div id="uploader-section" class="mt-8 w-full">
				<Card>
					<CardHeader>
						<CardTitle class="text-xl">Upload File</CardTitle>
						<CardDescription>
							Select or drop your .xlsx file below.
						</CardDescription>
					</CardHeader>
					<CardContent>
						<form id="upload-form">
							<Dropzone name="file-upload" accept=".xlsx,.xls" required>
								<DropzoneUploadIndicator>
									<span class="my-6 text-base"
										>Drop Excel file here or click to upload</span
									>
								</DropzoneUploadIndicator>
								<DropzoneFilesList />
							</Dropzone>
							<Button type="submit" class="mt-4 w-full">Process File</Button>
						</form>
					</CardContent>
				</Card>
			</div>

			<!-- Loading State -->
			<div id="loading-section" class="mt-8 w-full" style="display: none;">
				<Card>
					<CardHeader>
						<Skeleton class="h-6 w-48" />
						<Skeleton class="mt-2 h-4 w-full max-w-sm" />
					</CardHeader>
					<CardContent class="space-y-4">
						<div class="flex space-x-4">
							<Skeleton class="h-10 w-24 rounded-md" />
							<Skeleton class="h-10 w-24 rounded-md" />
							<Skeleton class="h-10 w-24 rounded-md" />
						</div>
						<div class="space-y-2 pt-4">
							<Skeleton class="h-8 w-full" />
							<Skeleton class="h-8 w-full" />
							<Skeleton class="h-8 w-full" />
						</div>
					</CardContent>
				</Card>
			</div>

			<!-- Results Section -->
			<div id="results-section" class="mt-8 w-full" style="display: none;">
				<Tabs defaultValue="daily">
					<TabsList>
						<TabsTrigger value="daily">Daily</TabsTrigger>
						<TabsTrigger value="monthly">Monthly</TabsTrigger>
						<TabsTrigger value="monthly_macro">Monthly + Macro</TabsTrigger>
					</TabsList>

					<TabsContent value="daily">
						<div id="daily-table"></div>
					</TabsContent>
					<TabsContent value="monthly">
						<div id="monthly-table"></div>
					</TabsContent>
					<TabsContent value="monthly_macro">
						<div id="monthly-macro-table"></div>
					</TabsContent>
				</Tabs>
			</div>
		</div>
	</main>
</Layout>

<script>
	// Define types for intellisense
	/** @typedef {import('./index.astro').EquityRecord} EquityRecord */

	const uploaderSection = document.getElementById("uploader-section");
	const loadingSection = document.getElementById("loading-section");
	const resultsSection = document.getElementById("results-section");
	const uploadForm = document.getElementById("upload-form");

	/**
	 * Mocks the API call to process the file.
	 * @returns {Promise<any>}
	 */
	function mockApiCall() {
		console.log("Simulating API call...");
		return new Promise((resolve) => {
			setTimeout(() => {
				const mockData = {
					data_diaria: [{ sheet_name: "AAPL MF Equity", final_value: 8.0, grade: 'A', predicted_return: 0.5, performance_grade: 'A' }, { sheet_name: "GOOGL MF Equity", final_value: 7.2, grade: 'A', predicted_return: 0.4, performance_grade: 'B' }],
					data_mensual: [{ sheet_name: "TSLA MF Equity", final_value: 6.5, grade: 'B', predicted_return: 1.2, performance_grade: 'A' }],
					data_mensual_macro: [{ sheet_name: "AMZN MF Equity", final_value: 9.1, grade: 'A', predicted_return: 1.8, performance_grade: 'A' }],
				};
				resolve(mockData);
			}, 2000);
		});
	}

	/**
	 * Populates a container with a dynamically generated HTML table.
	 * @param {string} containerId - The ID of the container element.
	 * @param {EquityRecord[]} data
	 */
	function populateTable(containerId, data) {
		const tableContainer = document.getElementById(containerId);
		if (!tableContainer) return;

		let rowsHtml = '';
		if (!data || data.length === 0) {
			rowsHtml = '<tr><td colspan="5" class="p-4 text-center text-muted-foreground">No data available.</td></tr>';
		} else {
			rowsHtml = data.map(record => `
				<tr class="border-b transition-colors hover:bg-muted/50">
					<td class="p-4 align-middle font-medium">${record.sheet_name}</td>
					<td class="p-4 align-middle text-right">${record.final_value.toFixed(2)}</td>
					<td class="p-4 align-middle">${record.grade}</td>
					<td class="p-4 align-middle">${record.performance_grade}</td>
					<td class="p-4 align-middle text-right">${record.predicted_return.toFixed(2)}%</td>
				</tr>
			`).join('');
		}

		// This HTML structure mimics the output of Starwind's Table components
		const tableWrapperHtml = `
			<div class="mt-4 overflow-hidden rounded-[var(--radius)] border">
				<table class="w-full text-sm">
					<thead class="[&_tr]:border-b">
						<tr class="border-b transition-colors hover:bg-muted/50">
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Ticker</th>
							<th class="h-12 px-4 text-right align-middle font-medium text-muted-foreground">Final Value</th>
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Grade</th>
							<th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground">Model Performance</th>
							<th class="h-12 px-4 text-right align-middle font-medium text-muted-foreground">Predicted Return</th>
						</tr>
					</thead>
					<tbody class="[&_tr:last-child]:border-0">
						${rowsHtml}
					</tbody>
				</table>
			</div>
		`;

		tableContainer.innerHTML = tableWrapperHtml;
	}

	/**
	 * Handles the form submission process.
	 * @param {Event} event
	 */
	async function handleFormSubmit(event) {
		event.preventDefault();
		const formData = new FormData(uploadForm);
		const fileInput = uploadForm.querySelector('input[type="file"]');

		if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
			console.warn("No file selected.");
			return; // Optionally show an error to the user
		}

		uploaderSection.style.display = "none";
		loadingSection.style.display = "block";
		resultsSection.style.display = "none";

		try {
			const data = await mockApiCall();

			populateTable("daily-table", data.data_diaria);
			populateTable("monthly-table", data.data_mensual);
			populateTable("monthly-macro-table", data.data_mensual_macro);

			loadingSection.style.display = "none";
			resultsSection.style.display = "block";
		} catch (error) {
			console.error("Failed to process file:", error);
			uploaderSection.style.display = "block";
			loadingSection.style.display = "none";
		}
	}

	uploadForm.addEventListener("submit", handleFormSubmit);
</script>
