---
import type { HTMLAttributes } from "astro/types";
import { tv } from "tailwind-variants";

import DropzoneFilesList from "./DropzoneFilesList.astro";
import DropzoneLoadingIndicator from "./DropzoneLoadingIndicator.astro";
import DropzoneUploadIndicator from "./DropzoneUploadIndicator.astro";

type Props = HTMLAttributes<"input"> & {
  /**
   * Whether to show the loading indicator initially
   */
  isUploading?: boolean;
};

// extract id separately so it can be used in the label. The input will get the same id with "-input" suffix.
const { class: className, id, isUploading = false, ...rest } = Astro.props as Props;

const root = tv({
  base: [
    "starwind-dropzone",
    "relative flex w-full flex-col items-center justify-center gap-1 rounded-lg px-6 py-12",
    "bg-background text-muted-foreground border-input cursor-pointer border border-dashed text-center text-sm",
    "starwind-transition-colors data-[is-uploading=false]:hover:bg-muted/50 data-[drag-active=true]:bg-muted/50",
    "focus-visible:outline-outline focus-visible:ring-0 focus-visible:outline-2 focus-visible:outline-offset-2",
  ],
});
---

<label
  id={id}
  tabindex="0"
  class={root({ class: className })}
  data-drag-active="false"
  data-has-files="false"
  data-is-uploading={String(isUploading)}
>
  <slot>
    <DropzoneUploadIndicator />
    <DropzoneLoadingIndicator />
    <DropzoneFilesList />
  </slot>

  <input tabindex="-1" type="file" class="sr-only" {...rest} />
</label>

<script>
  const fileSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-file"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M14 3v4a1 1 0 0 0 1 1h4" /><path d="M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z" /></svg>`;
  class FileInputHandler {
    private label: HTMLLabelElement;
    private input: HTMLInputElement;
    private uploadIndicator: HTMLElement | null;
    private loadingIndicator: HTMLElement | null;
    private filesList: HTMLElement | null;
    private files: File[] = [];
    private hasFiles: boolean = false;
    private isUploading: boolean = false;
    private observer: MutationObserver | null = null;

    constructor(label: HTMLLabelElement, idx: number) {
      this.label = label;
      const maybeInput = label.querySelector<HTMLInputElement>('input[type="file"]');
      if (!maybeInput) {
        throw new Error("No file input found inside starwind-dropzone");
      }
      this.input = maybeInput;
      this.uploadIndicator = label.querySelector(".starwind-upload-indicator");
      this.loadingIndicator = label.querySelector(".starwind-loading-indicator");
      this.filesList = label.querySelector(".starwind-files-list");

      // generate ID
      if (this.label.id) {
        const inputId = this.label.id + "-input";
        this.input.id = inputId;
        this.label.htmlFor = inputId;
      } else {
        const generatedId = `starwind-dropzone-${idx}`;
        this.input.id = generatedId;
        this.label.htmlFor = generatedId;
      }

      // Setup event handlers
      this.setupEvents();
    }

    private setActive(active: boolean) {
      this.label.dataset.dragActive = String(active);
    }

    // Set up mutation observer to watch for external attribute changes
    private observeAttributeChanges() {
      this.observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === "attributes" && mutation.attributeName === "data-is-uploading") {
            this.handleAttributeChange();
          }
        });
      });

      this.observer.observe(this.label, {
        attributes: true,
        attributeFilter: ["data-is-uploading"],
      });
    }

    // Handle attribute changes from external sources
    private handleAttributeChange() {
      const isUploading = this.label.dataset.isUploading === "true";

      // Only update internal state if it's different
      if (isUploading !== this.isUploading) {
        this.isUploading = isUploading;

        // Update UI
        if (this.uploadIndicator && this.loadingIndicator) {
          if (isUploading) {
            this.uploadIndicator.classList.add("hidden");
            this.loadingIndicator.classList.remove("hidden");
          } else {
            this.loadingIndicator.classList.add("hidden");
            this.uploadIndicator.classList.remove("hidden");
          }
        }
      }
    }

    private updateFilesList() {
      if (!this.filesList) return;

      const hasFiles = this.files.length > 0;
      this.label.dataset.hasFiles = String(hasFiles);

      if (hasFiles) {
        this.filesList.classList.remove("invisible");

        // Clear previous files
        this.filesList.innerHTML = "";

        // Create file list
        this.files.forEach((file) => {
          const fileItem = document.createElement("div");

          // Insert SVG directly
          fileItem.innerHTML = fileSvg;

          const fileText = document.createElement("span");
          fileText.textContent = file.name;

          // Append text after the SVG
          fileItem.appendChild(fileText);

          // Use non-null assertion since we already checked at the beginning of the method
          this.filesList!.appendChild(fileItem);
        });
      } else {
        this.filesList.classList.add("invisible");
      }
    }

    private handleFiles(files: FileList | null) {
      if (!files || files.length === 0) return;

      this.files = Array.from(files);
      this.updateFilesList();
    }

    private setupEvents() {
      this.label.addEventListener("dragover", (e) => {
        e.preventDefault();
        this.setActive(true);
      });

      this.label.addEventListener("dragleave", () => {
        this.setActive(false);
      });

      this.label.addEventListener("drop", (e) => {
        e.preventDefault();
        this.setActive(false);

        const { files } = e.dataTransfer || {};
        if (files && files.length) {
          const dt = new DataTransfer();
          Array.from(files).forEach((file) => dt.items.add(file));
          this.input.files = dt.files;
          this.input.dispatchEvent(new Event("change", { bubbles: true }));

          this.handleFiles(files);
        }
      });

      // Handle file selection from dialog
      this.input.addEventListener("change", () => {
        this.handleFiles(this.input.files);
      });

      // Add keyboard accessibility for Enter and Space keys
      this.label.addEventListener("keydown", (e) => {
        // Handle Enter (13) and Space (32) keys
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          this.input.click(); // Trigger the native file dialog
        }
      });

      if (this.loadingIndicator) {
        // Watch for external changes to data-is-uploading attribute
        this.observeAttributeChanges();
        // Initialize based on current attribute values
        this.handleAttributeChange();
      }
    }
  }

  // Store instances in a WeakMap to avoid memory leaks
  const fileInputInstances = new WeakMap<HTMLElement, FileInputHandler>();

  const setupFileInputs = () => {
    document.querySelectorAll<HTMLLabelElement>(".starwind-dropzone").forEach((label, idx) => {
      if (!fileInputInstances.has(label)) {
        try {
          fileInputInstances.set(label, new FileInputHandler(label, idx));
        } catch {
          /* ignore labels without inputs */
        }
      }
    });
  };

  setupFileInputs();
  document.addEventListener("astro:after-swap", setupFileInputs);
</script>
